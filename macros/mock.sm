# Builds mock data structures for testing.  Requires externs:
#   - events.se -> EVENTS
#   - expiringEvents.se -> EXPIRING
#   - reporting.se -> REPORTING
#   - branches.se -> BRANCHES
macro binary_mock($branch, $period):
    with $reporters = [0x00e3f8de3ed9d428dc235ce0c25bc1136073be8b, 0x63524e3fe4791aefce1e932bbfb3fdf375bfad89, 0xb76a02724d44c89c20e41882f729a092f14d3eaf, 0xc76a02724d44c89c20e41882f729a092f14d3eaf, 0xd76a02724d44c89c20e41882f729a092f14d3eaf, 0xe76a02724d44c89c20e41882f729a092f14d3eaf]:
        with $reputation = [2, 10, 4, 2, 7, 1]:
            with $num_reports = len($reporters):
                with $reports = array($num_reports):
                    $reports[0] = [2, 2, 1, 2]
                    $reports[1] = [2, 1, 1, 1]
                    $reports[2] = [2, 2, 1, 1]
                    $reports[3] = [2, 2, 2, 1]
                    $reports[4] = [2, 1, 2, 2]
                    $reports[5] = [1, 1, 2, 2]
                    with $num_events = len($reports[0]):
                        BRANCHES.initializeBranch($branch, $period, 3, 1)
                        with $j = 0:
                            while $j < $num_events:
                                with $i = 0:
                                    while $i < $num_reports:
                                        $reports[$i][$j] = fix($reports[$i][$j])
                                        $i += 1
                                $min_value = 1
                                $max_value = 2
                                EVENTS.initializeEvent($j, $branch, $period, $min_value, $max_value, 2)
                                EXPIRING.addEvent($branch, $period, $j)
                                $j += 1
                        with $i = 0:
                            while $i < $num_reports:
                                REPORTING.addReporter($branch, $reporters[$i])
                                REPORTING.setRep($branch, $i, fix($reputation[$i]))
                                EXPIRING.setReporterBallot($branch, $period, $i, $reports[$i], $reputation[$i])
                                $i += 1
                        $flatsize = $num_reports * $num_events
                        EXPIRING.setVSize($branch, $period, $flatsize)
                        with $i = 0:
                            while $i < $num_reports:
                                with $ballot = EXPIRING.getReporterBallot($branch, $period, $i, outitems=$num_events):
                                    with $j = 0:
                                        while $j < $num_events:
                                            if $reports[$i][$j] != $ballot[$j]:
                                                log($ballot[$j])
                                                return(-1)
                                            $j += 1
                                    $i += 1

macro scalar_mock($branch, $period):
    with $reporters = [0x00e3f8de3ed9d428dc235ce0c25bc1136073be8b, 0x63524e3fe4791aefce1e932bbfb3fdf375bfad89, 0xb76a02724d44c89c20e41882f729a092f14d3eaf, 0xc76a02724d44c89c20e41882f729a092f14d3eaf, 0xd76a02724d44c89c20e41882f729a092f14d3eaf, 0xe76a02724d44c89c20e41882f729a092f14d3eaf]:
        with $reputation = [1, 1, 1, 1, 1, 1]:
            with $num_reports = len($reporters):
                with $reports = array($num_reports):
                    $reports[0] = [ 2^65, 2^65, 2^64, 2^64, 2^64*233, 2^64*1602759/100 ]
                    $reports[1] = [ 2^65, 2^64, 2^64, 2^64, 2^64*199, 0 ]
                    $reports[2] = [ 2^65, 2^65, 2^64, 2^64, 2^64*233, 2^64*1602759/100 ]
                    $reports[3] = [ 2^65, 2^65, 2^65, 2^64, 2^64*250, 0 ]
                    $reports[4] = [ 2^64, 2^64, 2^65, 2^65, 2^64*435, 2^64* 8001 ]
                    $reports[5] = [ 2^64, 2^64, 2^65, 2^65, 2^64*435, 2^64*19999 ]
                    with $num_events = len($reports[0]):
                        BRANCHES.initializeBranch($branch, $period, 3, 1)
                        with $j = 0:
                            while $j < $num_events:
                                $min_value = 1
                                $max_value = 2
                                if $j == 4:
                                    $min_value = 0
                                    $max_value = 435
                                elif $j == 5:
                                    $min_value = 8000
                                    $max_value = 20000
                                EVENTS.initializeEvent($j, $branch, $period, $min_value, $max_value, 2)
                                EXPIRING.addEvent($branch, $period, $j)
                                $j += 1
                        with $i = 0:
                            while $i < $num_reports:
                                REPORTING.addReporter($branch, $reporters[$i])
                                REPORTING.setRep($branch, $i, fix($reputation[$i]))
                                EXPIRING.setReporterBallot($branch, $period, $i, $reports[$i], $reputation[$i])
                                $i += 1
                        $flatsize = $num_reports * $num_events
                        EXPIRING.setVSize($branch, $period, $flatsize)
                        with $i = 0:
                            while $i < $num_reports:
                                with $ballot = EXPIRING.getReporterBallot($branch, $period, $i, outitems=$num_events):
                                    with $j = 0:
                                        while $j < $num_events:
                                            if $reports[$i][$j] != $ballot[$j]:
                                                log($ballot[$j])
                                                return(-1)
                                            $j += 1
                                    $i += 1
