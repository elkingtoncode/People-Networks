extern events.se: [getEventBranch:i:i, getEventInfo:i:a, getExpiration:i:i, getMaxValue:i:i, getMinValue:i:i, getNumOutcomes:i:i, getOutcome:i:i, initializeEvent:iiiiii:i, setOutcome:ii:i]
extern expiringEvents.se: [addEvent:iii:i, getAdjPrinComp:ii:a, getCovarianceMatrixRow:ii:a, getDeflated:ii:a, getEvent:iii:i, getEvents:ii:a, getLatent:ii:i, getLoadingVector:ii:a, getNewOne:ii:a, getNewTwo:ii:a, getNumberEvents:ii:i, getOutcomesFinal:ii:a, getReport:iiii:i, getReportHash:iii:i, getReporterBallot:iii:a, getReportsFilled:ii:a, getReportsMask:ii:a, getScores:ii:a, getSetOne:ii:a, getSetTwo:ii:a, getSmoothRep:ii:a, getTotalRepReported:ii:i, getVSize:ii:i, getWeightedCenteredData:ii:a, makeBallot:ii:a, moveEventsToCurrentPeriod:iii:i, returnOld:ii:a, setAdjPrinComp:iia:i, setCovarianceMatrixRow:iia:i, setDeflated:iia:i, setLatent:iii:i, setLoadingVector:iia:i, setNewOne:iia:i, setNewTwo:iia:i, setOld:iia:i, setOutcomesFinal:iia:i, setReportHash:iiii:i, setReporterBallot:iiiai:i, setReportsFilled:iia:i, setReportsMask:iia:i, setScores:iia:i, setSetOne:iia:i, setSetTwo:iia:i, setSmoothRep:iia:i, setTotalRepReported:iii:i, setVSize:iii:i, setWeightedCenteredData:iia:i]
extern reporting.se: [addRep:iii:i, addReporter:ii:i, faucet:_:_, getNumberReporters:i:i, getRepBalance:ii:i, getRepByIndex:ii:i, getReporterID:ii:i, getReputation:i:a, hashReport:ai:i, repIDToIndex:ii:i, setInitialReporters:ii:i, setRep:iii:i, subtractRep:iii:i]
extern branches.se: [addMarket:ii:i, getBranch:i:i, getBranches:_:a, getMarkets:i:a, getMinTradingFee:i:i, getNumBranches:_:i, getNumMarkets:i:i, getPeriodLength:i:i, getStep:i:i, getSubstep:i:i, getVotePeriod:i:i, incrementPeriod:i:i, incrementStep:i:i, incrementSubstep:i:i, initializeBranch:iiii:i, setStep:ii:i, setSubstep:ii:i]
extern cash.se: [addCash:ii:i, balance:i:i, faucet:_:i, send:ii:i, sendFrom:iii:i, subtractCash:ii:i]
extern info.se: [getCreationFee:i:i, getCreator:i:i, getDescription:i:s, getDescriptionLength:i:i, setInfo:isii:i]
extern interpolate.se: [interpolate:aaaaa:a]
extern center.se: [center:aaaaaii:a, covariance:aaii:a, tokenize:ai:a]
extern score.se: [blank:iii:a, deflate:aaii:a, latent:aai:i, loadings:aaaii:a, score:aaaiii:a]
extern adjust.se: [reputation_delta:aii:a, select_scores:aaaaaaii:a, weighted_delta:aaaaii:a]
extern resolve.se: [resolve:aaaaaii:a, smooth:aaii:a]
extern payout.se: [payout:aaaii:a]

# EVENTS = 0xb71464588fc19165cbdd1e6e8150c40df544467b
# EXPIRING = 
# REPORTING = 0xd1f7f020f24abca582366ec80ce2fef6c3c22233
# BRANCHES = 0x13dc5836cd5638d0b81a1ba8377a7852d41b5bbe
# CASH = 0xf1d413688a330839177173ce98c86529d0da6e5c
# INFO = 0x910b359bb5b2c2857c1d3b7f207a08f3f25c4a8b
# INTERPOLATE =
# CENTER =
# SCORE =
# ADJUST =
# RESOLVE =
# PAYOUT =

EVENTS = create("../data and api files/events.se")
EXPIRING = create("../data and api files/expiringEvents.se")
REPORTING = create("../data and api files/reporting.se")
BRANCHES = create("../data and api files/branches.se")
CASH = create("../data and api files/cash.se")
INFO = create("../data and api files/info.se")
INTERPOLATE = create("../consensus/interpolate.se")
CENTER = create("../consensus/center.se")
SCORE = create("../consensus/score.se")
ADJUST = create("../consensus/adjust.se")
RESOLVE = create("../consensus/resolve.se")
PAYOUT = create("../consensus/payout.se")

# - 50% of fees already distributed to market creators
#   all remaining fees go to reporters
# - what if not enough consensus or not enough events expiring upcoming
# @return next step or loop index (see below), for final call return new voting period
def dispatch(branchNumber, mockNumber):
    with branch = 1:
        with period = 1:
            if mockNumber == 0:
                binary_mock(branch, period)
            else:
                scalar_mock(branch, period)
            with num_events = EXPIRING.getNumberEvents(branch, period):
                with flatsize = EXPIRING.getVSize(branch, period):
                    with num_reports = flatsize / num_events:
                        while BRANCHES.getStep(branch) < 10:
                            step = BRANCHES.getStep(branch)
                            if step == 0:
                                ##################
                                # interpolate.se #
                                ##################
                                with reputation = array(num_reports):
                                    with reports = array(flatsize):
                                        with flatsize_x_2 = flatsize * 2:
                                            with i = 0:
                                                while i < num_reports:
                                                    with reporterID = REPORTING.getReporterID(branch, i):
                                                        reputation[i] = REPORTING.getRepBalance(branch, reporterID)
                                                        # - checks to see if each reporter actually voted on events
                                                        # - if they didn't vote (simply check if they voted on first event)
                                                        #     do nothing (these values will be 0 by default due to Serpent array styles)
                                                        #     else if the reporter did report on events put their ballot into the reports array
                                                        with ballot = EXPIRING.getReporterBallot(branch, period, i, outitems=num_events):
                                                            if ballot != 0:
                                                                with j = 0:
                                                                    while j < num_events:
                                                                        reports[i*num_events + j] = ballot[j]
                                                                        j += 1
                                                    i += 1
                                            with scaled = array(num_events):
                                                with scaled_max = array(num_events):
                                                    with scaled_min = array(num_events):
                                                        with j = 0:
                                                            while j < num_events:
                                                                with event = EXPIRING.getEvent(branch, period, j):
                                                                    # YES, NO, ONE, etc. macros defined in consensus/constants.se
                                                                    if fix(EVENTS.getMaxValue(event)) != YES:
                                                                        scaled[j] = 1
                                                                        # TODO convert maxValue and minValue to fixed-point in storage
                                                                        scaled_max[j] = fix(EVENTS.getMaxValue(event))
                                                                        scaled_min[j] = fix(EVENTS.getMinValue(event))
                                                                    else:
                                                                        scaled[j] = 0
                                                                        scaled_min[j] = NO
                                                                        scaled_max[j] = YES
                                                                j += 1
                                                        with reports_interp = INTERPOLATE.interpolate(reports, reputation, scaled, scaled_max, scaled_min, outitems=flatsize_x_2):
                                                            EXPIRING.setVSize(branch, period, flatsize)
                                                            reports_filled = slice(reports_interp, items=0, items=flatsize)
                                                            EXPIRING.setReportsFilled(branch, period, reports_filled)
                                                            EXPIRING.setReportsMask(branch, period, slice(reports_interp, items=flatsize, items=flatsize_x_2))

                            #############
                            # center.se #
                            #############

                            elif step == 1:
                                # center
                                with reputation = array(num_reports):
                                    with i = 0:
                                        while i < num_reports:
                                            reputation[i] = REPORTING.getRepByIndex(branch, i)
                                            i += 1
                                    with scaled = array(num_events):
                                        with scaled_max = array(num_events):
                                            with scaled_min = array(num_events):
                                                with j = 0:
                                                    while j < num_events:
                                                        with event = EXPIRING.getEvent(branch, period, j):
                                                            if fix(EVENTS.getMaxValue(event)) != YES:
                                                                scaled[j] = 1
                                                                scaled_min[j] = fix(EVENTS.getMinValue(event))
                                                                scaled_max[j] = fix(EVENTS.getMaxValue(event))
                                                            else:
                                                                scaled[j] = 0
                                                                scaled_min[j] = NO
                                                                scaled_max[j] = YES
                                                        j += 1
                                                with reports_filled = EXPIRING.getReportsFilled(branch, period, outitems=flatsize):
                                                    with lflatsize = flatsize + num_events + 2:
                                                        with result = CENTER.center(reports_filled, reputation, scaled, scaled_max, scaled_min, MAX_ITERATIONS, MAX_COMPONENTS, outitems=lflatsize):
                                                            wcd = slice(result, items=0, items=flatsize)
                                                            EXPIRING.setWeightedCenteredData(branch, period, wcd)
                                                            loading_vector = slice(result, items=flatsize, items=lflatsize)
                                                            EXPIRING.setLoadingVector(branch, period, loading_vector)

                            # covariance
                            elif step == 2:
                                with reputation = array(num_reports):
                                    with i = 0:
                                        while i < num_reports:
                                            reputation[i] = REPORTING.getRepByIndex(branch, i)
                                            i += 1
                                    with reptokens = CENTER.tokenize(reputation, num_reports, outitems=num_reports):
                                        with wcd = EXPIRING.getWeightedCenteredData(branch, period, outitems=flatsize):
                                            with covrow = CENTER.covariance(wcd, reptokens, num_reports, num_events, outitems=num_events):
                                                EXPIRING.setCovarianceMatrixRow(branch, period, covrow)
                                                EXPIRING.setDeflated(branch, period, wcd)

                            ############
                            # score.se #
                            ############

                            #######################
                            # loop MAX_COMPONENTS #
                            #######################
                            elif step == 3:
                                # with loading_vector = EXPIRING.getLoadingVector(branch, period, outitems=num_events+2):
                                while BRANCHES.getSubstep(branch) < 5:
                                    substep = BRANCHES.getSubstep(branch)
                                    if substep == 4:
                                        # more = REDEEM_SCORE.score(branch, period, num_events, num_reports, flatsize)
                                        with loading_vector = EXPIRING.getLoadingVector(branch, period, outitems=num_events+2):
                                            with wcd =  EXPIRING.getWeightedCenteredData(branch, period, outitems=flatsize):
                                                with latent = EXPIRING.getLatent(branch, period):
                                                    with scores = EXPIRING.getScores(branch, period, outitems=num_reports):
                                                        scores = SCORE.score(scores, loading_vector, wcd, latent, num_reports, num_events, outitems=num_reports)
                                                        EXPIRING.setScores(branch, period, scores)
                                                        # if we've reached the last component...
                                                        if loading_vector[num_events+1] == 0:
                                                            # return(0)
                                                            more = 0
                                                        else:
                                                            # return(1)
                                                            more = 1
                                        if more == 1:
                                            BRANCHES.setSubstep(branch, 0)
                                        else:
                                            # BRANCHES.setSubstep(branch, 0) # reset substep
                                            BRANCHES.incrementSubstep(branch) # exit loop (testing only)
                                            BRANCHES.incrementStep(branch) # next step

                                    elif substep == 0:
                                        # REDEEM_SCORE.blank(branch, period, num_events, num_reports, flatsize)
                                        with ne_plus_2 = num_events + 2:
                                            # - if element ne_plus_2 is zero, we're on the first component, so set the last
                                            #   element equal to MAX_COMPONENTS
                                            # - otherwise, decrement the last element
                                            with loading_vector = EXPIRING.getLoadingVector(branch, period, outitems=num_events+2):
                                                if loading_vector[num_events+1] == 0:
                                                    EXPIRING.setLoadingVector(branch, period, SCORE.blank(MAX_COMPONENTS, MAX_ITERATIONS, num_events, outitems=ne_plus_2))
                                                else:
                                                    EXPIRING.setLoadingVector(branch, period, SCORE.blank(loading_vector[num_events+1]-1, MAX_ITERATIONS, num_events, outitems=ne_plus_2))
                                                BRANCHES.incrementSubstep(branch)

                                    #######################
                                    # loop MAX_ITERATIONS #
                                    #######################
                                    elif substep == 1:
                                        # more = REDEEM_SCORE.loadings(branch, period, num_events, num_reports, flatsize)
                                        with ne_plus_2 = num_events + 2:
                                            with loading_vector = EXPIRING.getLoadingVector(branch, period, outitems=ne_plus_2):
                                                with deflated =  EXPIRING.getDeflated(branch, period, outitems=flatsize):
                                                    with reputation = array(num_reports):
                                                        with i = 0:
                                                            while i < num_reports:
                                                                reputation[i] = REPORTING.getRepByIndex(branch, i)
                                                                i += 1
                                                        # Iteratively diagonalize the weighted centered data matrix,
                                                        # deflating (subtracting out the eigenvectors) the matrix after each
                                                        # eigenvector is found
                                                        loading_vector = SCORE.loadings(loading_vector, deflated, reputation, num_reports, num_events, outitems=ne_plus_2)
                                                        EXPIRING.setLoadingVector(branch, period, loading_vector)
                                                        if loading_vector[num_events] == 0:
                                                            # return(0)
                                                            more = 0
                                                        else:
                                                            # return(1)
                                                            more = 1
                                        if more == 0:
                                            BRANCHES.incrementSubstep(branch)

                                    ############
                                    # end loop #
                                    ############
                                    elif substep == 2:
                                        # REDEEM_SCORE.latent(branch, period, num_events, num_reports, flatsize)
                                        with loading_vector = EXPIRING.getLoadingVector(branch, period, outitems=num_events+2):
                                            with covrow = EXPIRING.getCovarianceMatrixRow(branch, period, outitems=num_events):
                                                EXPIRING.setLatent(branch, period, SCORE.latent(covrow, loading_vector, num_events))
                                                EXPIRING.setCovarianceMatrixRow(branch, period, covrow)
                                                BRANCHES.incrementSubstep(branch)

                                    elif substep == 3:
                                        # REDEEM_SCORE.deflate(branch, period, num_events, num_reports, flatsize)
                                        with loading_vector = EXPIRING.getLoadingVector(branch, period, outitems=num_events+2):
                                            with deflated = EXPIRING.getDeflated(branch, period, outitems=flatsize):
                                                deflated = SCORE.deflate(loading_vector, deflated, num_reports, num_events, outitems=flatsize)
                                                EXPIRING.setDeflated(branch, period, deflated)
                                                BRANCHES.incrementSubstep(branch)

                            #############
                            # adjust.se #
                            #############

                            elif step == 4:
                                # reputation_delta
                                with scores = EXPIRING.getScores(branch, period, outitems=num_reports):
                                    with nr_x_2 = num_reports * 2:
                                        with sets = ADJUST.reputation_delta(scores, num_reports, num_events, outitems=nr_x_2):
                                            EXPIRING.setSetOne(branch, period, slice(sets, items=0, items=num_reports))
                                            EXPIRING.setSetTwo(branch, period, slice(sets, items=num_reports, items=nr_x_2))

                            elif step == 5:
                                # weighted_delta
                                with reports_filled = EXPIRING.getReportsFilled(branch, period, outitems=flatsize):
                                    with reputation = array(num_reports):
                                        with i = 0:
                                            while i < num_reports:
                                                reputation[i] = REPORTING.getRepByIndex(branch, i)
                                                i += 1
                                            with set1 = EXPIRING.getSetOne(branch, period, outitems=num_reports):
                                                with set2 = EXPIRING.getSetTwo(branch, period, outitems=num_reports):
                                                    with ne_x_3 = num_events * 3:
                                                        with ne_x_2 = num_events * 2:
                                                            with wsets = ADJUST.weighted_delta(set1, set2, reputation, reports_filled, num_reports, num_events, outitems=ne_x_3):
                                                                EXPIRING.setOld(branch, period, slice(wsets, items=0, items=num_events))
                                                                EXPIRING.setNewOne(branch, period, slice(wsets, items=num_events, items=ne_x_2))
                                                                EXPIRING.setNewTwo(branch, period, slice(wsets, items=ne_x_2, items=ne_x_3))

                            elif step == 6:
                                # select_scores
                                with old = EXPIRING.returnOld(branch, period, outitems=num_events):
                                    with new1 = EXPIRING.getNewOne(branch, period, outitems=num_events):
                                        with new2 = EXPIRING.getNewTwo(branch, period, outitems=num_events):
                                            with set1 = EXPIRING.getSetOne(branch, period, outitems=num_reports):
                                                with set2 = EXPIRING.getSetTwo(branch, period, outitems=num_reports):
                                                    with scores = EXPIRING.getScores(branch, period, outitems=num_reports):
                                                        with adjusted_scores = ADJUST.select_scores(old, new1, new2, set1, set2, scores, num_reports, num_events, outitems=num_reports):
                                                            EXPIRING.setAdjPrinComp(branch, period, adjusted_scores)


                            elif step == 7:
                                ##############
                                # resolve.se #
                                ##############

                                with reputation = array(num_reports):
                                    with i = 0:
                                        while i < num_reports:
                                            reputation[i] = REPORTING.getRepByIndex(branch, i)
                                            i += 1
                                        with adjusted_scores = EXPIRING.getAdjPrinComp(branch, period, outitems=num_reports):
                                            with smooth_rep = RESOLVE.smooth(adjusted_scores, reputation, num_reports, num_events, outitems=num_reports):
                                                EXPIRING.setSmoothRep(branch, period, smooth_rep)

                            elif step == 8:
                                with reports_filled = EXPIRING.getReportsFilled(branch, period, outitems=flatsize):
                                    with smooth_rep = EXPIRING.getSmoothRep(branch, period, outitems=num_reports):
                                        with scaled = array(num_events):
                                            with scaled_max = array(num_events):
                                                with scaled_min = array(num_events):
                                                    with j = 0:
                                                        while j < num_events:
                                                            with event = EXPIRING.getEvent(branch, period, j):
                                                                if fix(EVENTS.getMaxValue(event)) != YES:
                                                                    scaled[j] = 1
                                                                    scaled_min[j] = fix(EVENTS.getMinValue(event))
                                                                    scaled_max[j] = fix(EVENTS.getMaxValue(event))
                                                                else:
                                                                    scaled[j] = 0
                                                                    scaled_min[j] = NO
                                                                    scaled_max[j] = YES
                                                            j += 1
                                                        with outcomes = RESOLVE.resolve(smooth_rep, reports_filled, scaled, scaled_max, scaled_min, num_reports, num_events, outitems=num_events):
                                                            EXPIRING.setOutcomesFinal(branch, period, outcomes)

                                #############
                                # payout.se #
                                #############

                            elif step == 9:
                                with smooth_rep = EXPIRING.getSmoothRep(branch, period, outitems=num_reports):
                                    with reports_mask = EXPIRING.getReportsMask(branch, period, outitems=flatsize):
                                        with outcomes = EXPIRING.getOutcomesFinal(branch, period, outitems=num_events):
                                            with reporter_payouts = PAYOUT.payout(outcomes, smooth_rep, reports_mask, num_reports, num_events, outitems=num_reports):
                                                # get event ID for each event by taking the x index in the reports arrays
                                                # - shoving it in reporting.events[] && getting the cooresponding ID
                                                with j = 0:
                                                    while j < num_events:
                                                        with event = EXPIRING.getEvent(branch, period, j):
                                                            # then take outcomes_final && set each event outcome
                                                            # (BAD and BOND macros defined in consensus/constants.se)
                                                            EVENTS.setOutcome(event, outcomes[j])
                                                            if outcomes[j] != BAD:
                                                                # return bond
                                                                # Q: should the subtractCash be from the event's ID?
                                                                CASH.subtractCash(event, BOND)
                                                                CASH.addCash(INFO.getCreator(event), BOND)
                                                            else:
                                                                # give event bond money to reporters
                                                                CASH.subtractCash(event, BOND)
                                                                CASH.addCash(branch, BOND)
                                                        j += 1
                                                # - need to loop through rep holders && distribute 50% of branch fees to
                                                #   reporters' cashcoin addresses 
                                                # - also need to take reporter_payouts && redistribute reputation in the
                                                #   Reporting structure accordingly
                                                with i = 0:
                                                    # TODO double-check that the cash in and out adds up to 0
                                                    while i < num_reports:
                                                        REPORTING.setRep(branch, i, fixed_multiply(reporter_payouts[i], 21000000))
                                                        CASH.addCash(REPORTING.getReporterID(branch, i), fixed_multiply(CASH.balance(branch), reporter_payouts[i]))
                                                        i += 1
                                                    CASH.subtractCash(branch, CASH.balance(branch))
                                # BRANCHES.setStep(branch, 0) # reset step
                                BRANCHES.incrementPeriod(branch)
                                # return(period + 1)

                            BRANCHES.incrementStep(branch)
                            # return(step + 1)

inset('../macros/constants.se')
inset('../macros/fixed.se')
inset('../macros/arrays.se')
inset('../macros/logging.se')
inset('../macros/mock.se')
