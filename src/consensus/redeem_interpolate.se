# import events as EVENTS
import expiringEvents as EXPIRING
import reporting as REPORTING
# import interpolate as INTERPOLATE

data Interpolate[][](reputation[], reports[])

# - loop through reputation && check if in reporters, if so use their
#   report, if not use the fillin / not reported report (all zeroes)
# - use this to make a giant array of reports to pass to self.consensus
# - want to pass reports for each 0 indexed event in order (so we get
#   reports from an actual reporter)
# (if they didn't vote we set their array for each event to 0,0,0,0,0,0, etc...)
def read_ballots(branch, period, num_events, num_reports, flatsize):
    with reputation = array(num_reports):
        with reports = array(flatsize):
            with i = 0:
                while i < num_reports:
                    with reporterID = REPORTING.getReporterID(branch, i):
                        reputation[i] = REPORTING.getRepBalance(branch, reporterID)
                        # - checks to see if each reporter actually voted on events
                        # - if they didn't vote (simply check if they voted on first event)
                        #     do nothing (these values will be 0 by default due to Serpent array styles)
                        #     else if the reporter did report on events put their ballot into the reports array
                        # reports[i*num_events] = slice(EXPIRING.getReporterBallot(branch, period, reporterID, outitems=num_events), items=0, items=1)
                        reports[i*num_events] = EXPIRING.getReport(branch, period, reporterID, 0)
                        if reports[i*num_events] != 0:
                            with ballot = array(num_events - 1):
                                ballot = slice(EXPIRING.getReporterBallot(branch, period, reporterID, outitems=num_events), items=1, items=num_events)
                                with j = 1:
                                    while j < num_events:
                                        reports[i*num_events + j] = ballot[j - 1]
                                        j += 1
                    i += 1
                reputation = normalize(reputation)
                save(self.Interpolate[branch][period].reports[0], reports, chars=32*flatsize)
                save(self.Interpolate[branch][period].reputation[0], reputation, chars=32*num_reports)
                return(1)

def interpolate(branch, period, num_events, num_reports, flatsize):
    with reputation = array(num_reports):
        reputation = slice(load(self.Interpolate[branch][period].reputation[0], chars=32*num_reports), items=0, items=num_reports)
        with reports = array(flatsize):
            reports = slice(load(self.Interpolate[branch][period].reports[0], chars=32*flatsize), items=0, items=num_reports)
            with reports_mask = array(flatsize):
                with reports_filled = array(flatsize):
                    with missing_values = 0:
                        with i = 0:
                            while i < flatsize:
                                if reports[i] == 0:
                                    reports_filled[i] = 0
                                    reports_mask[i] = 1
                                    missing_values = 1
                                else:
                                    reports_filled[i] = reports[i]
                                i += 1

                        # every event must be calculated, if any missing values
                        # b/c can only be missing ALL values
                        if missing_values:
                            active_rep = 0
                            j = 0
                            while j < num_reports:
                                if reports[j*num_events] != 0:
                                    active_rep += reputation[j]
                                j += 1
                            replacements = array(num_events)
                            i = 0
                            while i < num_events:

                                # weighted average of other reports
                                j = 0
                                while j < num_reports:
                                    replacements[i] += reputation[j] * reports[i + j*num_events] / active_rep
                                    j += 1
                                replacements[i] = catch(replacements[i])
                                i += 1
                            j = 0
                            while j < num_reports:
                                idx = j * num_events
                                if reports[idx] == 0:
                                    i = 0
                                    while i < num_events:
                                        reports_filled[i + idx] = replacements[i]
                                        i += 1
                                j += 1
                    EXPIRING.setVSize(branch, period, flatsize)
                    EXPIRING.setReportsFilled(branch, period, reports_filled)
                    EXPIRING.setReportsMask(branch, period, reports_mask)
                    return(1)

inset('../../macros/constants.sm')
inset('../../macros/fixed.sm')
inset('../../macros/arrays.sm')
