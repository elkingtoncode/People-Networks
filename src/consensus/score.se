# Outer product of vectors
macro outer_product($u, $v, $n):
    with $p = array($n^2):
        with $i = 0:
            while $i < $n:
                with $j = 0:
                    while $j < $n:
                        $p[$i*$n + $j] += fixed_multiply($u[$i], $v[$j])
                        $j += 1
                $i += 1
            $p

# Flattened fixed-point matrix multiplication
macro matrix_multiply($a, $arows, $acols, $b, $brows, $bcols):
    with $c = array($arows*$bcols):
        with $i = 0:
            while $i < $arows:
                with $j = 0:
                    while $j < $bcols:
                        with $k = 0:
                            while $k < $acols:
                                $c[$i*$bcols + $j] += fixed_multiply($a[$i*$acols + $k], $b[$k*$bcols + $j])
                                $k += 1
                        $j += 1
                $i += 1
            $c

def blank(components_remaining, max_iterations, num_events):
    with ne_plus_2 = num_events + 2:
        with iv = array(ne_plus_2):
            iv[0] = ONE
            iv[num_events] = max_iterations
            iv[num_events + 1] = components_remaining
            return(iv, items=ne_plus_2)

def loadings(iv:arr, X:arr, reputation:arr, num_reports, num_events):
    # R.dot(wcd).dot(lv).dot(wcd)
    with lvsize = len(iv):
        with lv = array(lvsize):
            with j = 0:
                while j < num_reports:
                    with d_dot_lv = 0:
                        with k = 0:
                            while k < num_events:
                                d_dot_lv += X[j*num_events + k] * iv[k]
                                k += 1
                        d_dot_lv /= ONE
                        with k = 0:
                            while k < num_events:
                                lv[k] -= d_dot_lv * X[j*num_events + k] * reputation[j] / ONE^2
                                k += 1
                    j += 1
            # Normalize by length
            with lv_dot_lv = 0:
                with j = 0:
                    while j < num_events:
                        lv_dot_lv += lv[j] * lv[j]
                        j += 1
                lv_dot_lv /= ONE
                with norm_lv = lv_dot_lv / 2:
                    with j = 0:
                        while j < 11:
                            norm_lv = (norm_lv + fixed_divide(lv_dot_lv, norm_lv)) / 2
                            j += 1
                    with j = 0:
                        while j < num_events:
                            lv[j] = fixed_divide(lv[j], norm_lv)
                            j += 1
            lv[num_events] = iv[num_events] - 1
            lv[num_events + 1] = iv[num_events + 1]
            return(lv, items=lvsize)

def latent(covrow:arr, loadings:arr, num_events):
    with lf = 0:
        with i = 0:
            while i < num_events:
                lf += fixed_multiply(covrow[i], loadings[i])
                i += 1
            if loadings[0] != 0:
                lf = fixed_divide(lf, loadings[0])
            else:
                lf = 0
            return(lf)

def deflate(ev:arr, wcd:arr, num_reports, num_events):
    with dsz = len(wcd):
        with evop = outer_product(ev, ev, num_events):
            with ddata = array(dsz):
                with data_x_evop = matrix_multiply(wcd, num_reports, num_events, evop, num_events, num_events):
                    with i = 0:
                        while i < dsz:
                            ddata[i] = wcd[i] - data_x_evop[i]
                            i += 1
                    return(ddata, items=dsz)

def score(scores:arr, lv:arr, wcd:arr, latent, num_reports, num_events):
    if lv[0] < 0:
        with j = 0:
            while j < num_events:
                lv[j] = -lv[j]
                j += 1
    with i = 0:
        while i < num_reports:
            with k = 0:
                while k < num_events:
                    scores[i] += fixed_multiply(wcd[i*num_events + k], latent * lv[k] / ONE)
                    k += 1
            i += 1
        return(scores, items=num_reports)

inset('../../macros/constants.sm')
inset('../../macros/fixed.sm')
inset('../../macros/arrays.sm')
