import expiringEvents as EXPIRING
import reporting as REPORTING
import branches as BRANCHES
import score as SCORE

def blank(branch, period, num_events, num_reports, flatsize):
    # blank
    # loading vector (eigenvector) has num_events + 2 elements:
    #   - second-to-last element: number of iterations remaining
    #   - last element: number of components (eigenvectors) remaining
    with ne_plus_2 = num_events + 2:
        # - if element ne_plus_2 is zero, we're on the first component, so set the last
        #   element equal to MAX_COMPONENTS
        # - otherwise, decrement the last element
        with loading_vector = array(ne_plus_2):
            loading_vector = slice(EXPIRING.getLoadingVector(branch, period, outitems=ne_plus_2), items=0, items=ne_plus_2)
            if loading_vector[num_events+1] == 0:
                if num_events >= MAX_COMPONENTS:
                    loading_vector = slice(SCORE.blank(MAX_COMPONENTS-1, MAX_ITERATIONS, num_events, outitems=ne_plus_2), items=0, items=ne_plus_2)
                else:
                    loading_vector = slice(SCORE.blank(num_events-1, MAX_ITERATIONS, num_events, outitems=ne_plus_2), items=0, items=ne_plus_2)
            else:
                loading_vector = slice(SCORE.blank(loading_vector[num_events+1]-1, MAX_ITERATIONS, num_events, outitems=ne_plus_2), items=0, items=ne_plus_2)
            EXPIRING.setLoadingVector(branch, period, loading_vector)
            return(1)

def loadings(branch, period, num_events, num_reports, flatsize):
    with ne_plus_2 = num_events + 2:
        with loading_vector = array(ne_plus_2):
            loading_vector = slice(EXPIRING.getLoadingVector(branch, period, outitems=ne_plus_2), items=0, items=ne_plus_2)
            with deflated = array(flatsize):
                deflated = slice(EXPIRING.getDeflated(branch, period, outitems=flatsize), items=0, items=flatsize)
                with reputation = array(num_reports):
                    with i = 0:
                        while i < num_reports:
                            reputation[i] = REPORTING.getRepByIndex(branch, i)
                            i += 1
                    # Iteratively diagonalize the weighted centered data matrix,
                    # deflating (subtracting out the eigenvectors) the matrix after each
                    # eigenvector is found
                    loading_vector = slice(SCORE.loadings(loading_vector, deflated, reputation, num_reports, num_events, outitems=ne_plus_2), items=0, items=ne_plus_2)
                    EXPIRING.setLoadingVector(branch, period, loading_vector)
                    if loading_vector[num_events] == 0:
                        return(0)
                    else:
                        return(1)

def latent(branch, period, num_events, num_reports, flatsize):
    with ne_plus_2 = num_events + 2:
        with loading_vector = array(ne_plus_2):
            loading_vector = slice(EXPIRING.getLoadingVector(branch, period, outitems=ne_plus_2), items=0, items=ne_plus_2)
            with covrow = array(num_events):
                covrow = slice(EXPIRING.getCovarianceMatrixRow(branch, period, outitems=num_events), items=0, items=num_events)
                with latent = SCORE.latent(covrow, loading_vector, num_events):
                    EXPIRING.setLatent(branch, period, latent)
                    return(1)

def deflate(branch, period, num_events, num_reports, flatsize):
    with ne_plus_2 = num_events + 2:
        with loading_vector = array(ne_plus_2):
            loading_vector = slice(EXPIRING.getLoadingVector(branch, period, outitems=ne_plus_2), items=0, items=ne_plus_2)
            with deflated = array(flatsize):
                deflated = slice(EXPIRING.getDeflated(branch, period, outitems=flatsize), items=0, items=flatsize)
                deflated = slice(SCORE.deflate(loading_vector, deflated, num_reports, num_events, outitems=flatsize), items=0, items=flatsize)
                EXPIRING.setDeflated(branch, period, deflated)
                return(1)

def score(branch, period, num_events, num_reports, flatsize):
    with ne_plus_2 = num_events + 2:
        with loading_vector = array(ne_plus_2):
            loading_vector = slice(EXPIRING.getLoadingVector(branch, period, outitems=ne_plus_2), items=0, items=ne_plus_2)
            with wcd = array(flatsize):
                wcd = slice(EXPIRING.getWeightedCenteredData(branch, period, outitems=flatsize), items=0, items=flatsize)
                with latent = EXPIRING.getLatent(branch, period):
                    with scores = array(num_reports):
                        scores = slice(EXPIRING.getScores(branch, period, outitems=num_reports), items=0, items=num_reports)
                        scores = slice(SCORE.score(scores, loading_vector, wcd, latent, num_reports, num_events, outitems=num_reports), items=0, items=num_reports)
                        EXPIRING.setScores(branch, period, scores)
                        if loading_vector[num_events+1] == 0:
                            return(0)
                        else:
                            return(1)

inset('../../macros/constants.sm')
inset('../../macros/fixed.sm')
