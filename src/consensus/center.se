def center(reports_filled:arr, reputation:arr, scaled:arr, scaled_max:arr, scaled_min:arr, max_iterations, max_components):
    with num_reports = len(reputation):
        with flatsize = len(reports_filled):
            with num_events = flatsize / num_reports:
                # calculate weighted centered data matrix
                with weighted_means = array(num_events):
                    with total_weight = 0:
                        with i = 0:
                            while i < num_reports:
                                with j = 0:
                                    while j < num_events:
                                        weighted_means[j] += reputation[i] * reports_filled[i * num_events + j]
                                        j += 1
                                total_weight += reputation[i]
                                i += 1
                            with j = 0:
                                while j < num_events:
                                    weighted_means[j] /= total_weight
                                    j += 1
                            # weighted centered data (wcd): [0, flatsize-1]
                            # loading_vector [1 0 0 . . . 0]: [flatsize, flatsize + num_events]
                            with lflatsize = flatsize + num_events + 2:
                                with wcd = array(lflatsize):
                                    with i = 0:
                                        while i < flatsize:
                                            # 0 if num_reports = 1
                                            wcd[i] = reports_filled[i] - weighted_means[i % num_events]
                                            i += 1
                                        wcd[i] = ONE
                                        wcd[lflatsize - 2] = max_iterations
                                        if max_components < num_events:
                                            wcd[lflatsize - 1] = max_components
                                        else:
                                            wcd[lflatsize - 1] = num_events
                                        return(wcd: arr)

def tokenize(reputation:arr, num_reports):
    with tokens = array(num_reports):
        with i = 0:
            while i < num_reports:
                tokens[i] = reputation[i] * COINS
                i += 1
            return(tokens: arr)

# First row of the covariance matrix
def covariance(wcd:arr, tokens:arr, num_reports, num_events):
    with cov = array(num_events):
        with wcd_x_tokens = array(num_reports):
            with i = 0:
                while i < num_reports:
                    wcd_x_tokens[i] = fixed_multiply(wcd[i*num_events], tokens[i])
                    i += 1
            with alltokens = sum(tokens):
                with i = 0:
                    while i < num_events:
                        with j = 0:
                            while j < num_reports:
                                cov[i] += fixed_multiply(wcd_x_tokens[j], wcd[j*num_events + i])
                                j += 1
                        cov[i] = fixed_divide(cov[i], alltokens - ONE)
                        i += 1
                    return(cov: arr)

inset('../../macros/constants.sm')
inset('../../macros/fixed.sm')
inset('../../macros/arrays.sm')
