# Minimum value of array
macro minimum($a):
    with $min = $a[0]:
        with $i = 1:
            with $len = len($a):
                while $i < $len:
                    if $a[$i] < $min:
                        $min = $a[$i]
                    $i += 1
                $min

def reputation_delta(scores:arr, num_reports, num_events):
    # Which of the two possible 'new' reputation vectors had more in common
    # with the original 'old' reputation?
    # set1: [0, num_reports - 1]
    # set2: [num_reports, 2*num_reports - 1]
    with two_num_reports = 2*num_reports:
        with sets = array(two_num_reports):
            with set1_compare = abs(minimum(scores)):
                with set2_compare = maximum(scores):
                    with i = 0:
                        while i < num_reports:
                            sets[i] = scores[i] + set1_compare
                            i += 1
                        while i < two_num_reports:
                            sets[i] = scores[i - num_reports] - set2_compare
                            i += 1
                        return(sets: arr)

def weighted_delta(set1:arr, set2:arr, reputation:arr, reports:arr, num_reports, num_events):
    with i = 0:
        while i < num_reports:
            reputation[i] = fixed_divide(reputation[i], TOTAL_REPUTATION)
            i += 1
    with three_num_events = 3*num_events:
        with wsets = array(three_num_events):
            with wset1 = normalize(set1):
                with wset2 = normalize(set2):
                    with i = 0:
                        with two_num_events = 2*num_events:
                            while i < num_events:
                                with k = 0:
                                    while k < num_reports:
                                        with pos = k*num_events + i:
                                            wsets[i] += fixed_multiply(reputation[k], reports[pos])
                                            wsets[i + num_events] += fixed_multiply(wset1[k], reports[pos])
                                            wsets[i + two_num_events] += fixed_multiply(wset2[k], reports[pos])
                                        k += 1
                                i += 1
                            return(wsets: arr)

def select_scores(old:arr, new1:arr, new2:arr, set1:arr, set2:arr, scores:arr, num_reports, num_events):
    # Difference in sum of squared errors. If > 0, then new1 had higher
    # errors (use new2); conversely if < 0, then use new1.
    with sse1 = 0:
        with sse2 = 0:
            with i = 0:
                while i < num_events:
                    sse1 += fixed_multiply(new1[i] - old[i], new1[i] - old[i])
                    sse2 += fixed_multiply(new2[i] - old[i], new2[i] - old[i])
                    i += 1
            with ref_ind = sse1 - sse2:
                with adjusted_scores = array(num_reports):
                    if ref_ind <= 0:
                        adjusted_scores = set1
                    else:
                        adjusted_scores = set2
                    return(adjusted_scores: arr)

inset('../../macros/constants.sm')
inset('../../macros/fixed.sm')
inset('../../macros/arrays.sm')
