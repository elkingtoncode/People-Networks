macro concat($a, $b):
    with $c = array(len($a)+len($b)):
        mcopy($c, $a, chars=32*len($a))
        mcopy($c+(chars=32*len($a)), $b, chars=32*len($b))
        $c

macro swap($a, $i, $j):
    with $t = $a[$i]:
        $a[$i] = $a[$j]
        $a[$j] = $t

# Find index corresponding to the maximum value of an array
macro findmax($a):
    with $len = len($a):
        with $max = $a[0]:
            with $maxidx = 0:
                with $i = 1:
                    while $i < $len:
                        if $a[$i] > $max:
                            $maxval = $a[$i]
                            $maxidx = $i
                        $i += 1
                    $maxidx

macro paired_qsort($a, $b):
    with $len = len($a):
        with $c = concat($a, $b):
            with $stack = array($len):
                with $top = 0:
                    with $h = 0:
                        with $l = 0:
                            with $x = 0:
                                with $i = 0:
                                    with $j = 0:
                                        $stack[0] = 0
                                        $stack[1] = $len - 1
                                        $top = 1
                                        while $top >= 0:
                                            $h = $stack[$top]
                                            $l = $stack[$top - 1]
                                            $top -= 2
                                            $x = $c[$h]
                                            $i = $l - 1
                                            $j = $l
                                            
                                            while $j <= $h - 1:
                                                if $c[$j] <= $x:
                                                    $i += 1
                                                    swap($c, $i, $j)
                                                    swap($c, $i + $len, $j + $len)
                                                $j += 1
                                            
                                            swap($c, $i+1, $h)
                                            swap($c, $i + $len + 1, $h + $len)
                                            if $i > $l:
                                                $stack[$top + 1] = $l
                                                $stack[$top + 2] = $i
                                                $top += 2
                                            if $i + 2 < $h:
                                                $stack[$top + 1] = $i + 2
                                                $stack[$top + 2] = $h
                                                $top += 2
                                        $c

# Weighted median of an array
macro weighted_median($data, $weights):
    with n = len($data):
        with done = 0:
            with midpoint = sum($weights) / 2:
                with j = 0:
                    while j < num_present[i]:
                        if $weights[j] > midpoint:
                            with maxidx = findmax($weights):
                                wmedian = $data[maxidx]
                            done = 1
                        j += 1
                if done == 0:
                    with sorted = paired_qsort($data, $weights):
                        with sorted_data = array(n):
                            with sorted_weights = array(n):
                                with j = 0:
                                    while j < n:
                                        sorted_data[j] = sorted[j]
                                        sorted_weights[j] = sorted[j + n]
                                        j += 1
                                with cumulative_weight = 0:
                                    with idx = 0:
                                        while cumulative_weight <= midpoint:
                                            idx += 1
                                            cumulative_weight += sorted_weights[idx-1]
                                        cumulative_weight -= sorted_weights[idx-1]
                                        # conservative machine epsilon: 
                                        # 0x1197998 = 18446744 = ONE / 10^12
                                        if abs(cumulative_weight - midpoint) < 0x1197998:
                                            wmedian = (sorted_data[idx-2] + sorted_data[idx-1]) / 2
                                        else:
                                            wmedian = sorted_data[idx-1]
                wmedian

# Weighted median of an array
def weighted_median(data:arr, weights:arr):
    return(weighted_median(data, weights))

inset('../../macros/arrays.sm')
