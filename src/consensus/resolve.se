import statistics as STATISTICS

# Absolute value of all array elements
macro array_abs($a):
    with $len = len($a):
        with $absval = array($len):
            with $i = 0:
                while $i < $len:
                    $absval[$i] = abs($a[$i])
                    $i += 1
                $absval

def smooth(adjusted_scores:arr, reputation:arr, num_reports, num_events):
    # Weighted sum of old and new reputation vectors.
    # New: row_reward_weighted
    # Old: reputation
    reputation = normalize(reputation)
    with row_reward_weighted = array(num_reports):
        with i = 0:
            while i < num_reports:
                row_reward_weighted[i] = reputation[i]
                i += 1

        # Overwrite the inital declaration IFF there wasn't perfect consensus.
        if maximum(array_abs(adjusted_scores)) != 0:
            with mean_weight = mean(row_reward_weighted):
                with i = 0:
                    while i < num_reports:
                        row_reward_weighted[i] = adjusted_scores[i] * row_reward_weighted[i] / mean_weight
                        i += 1
            row_reward_weighted = normalize(row_reward_weighted)
        # Freshly-calculated reward (in reputation)
        # (0.1 is the adjustable parameter "alpha", hard-coding it for now)
        with smooth_rep = array(num_reports):
            with i = 0:
                while i < num_reports:
                    smooth_rep[i] = row_reward_weighted[i]/10 + reputation[i]*9/10
                    i += 1
            smooth_rep = normalize(smooth_rep)
            return(smooth_rep, items=num_reports)

def resolve(smooth_rep:arr, reports:arr, scaled:arr, scaled_max:arr, scaled_min:arr, num_reports, num_events):
    with two_num_events = 2*num_events:
        with outcomes_final = array(num_events):
            # discriminate based on contract type
            with outcomes_raw = array(num_events):
                with i = 0:
                    while i < num_events:
                        if scaled[i] == 1:
                            with active_reports = array(num_reports):
                                with j = 0:
                                    while j < num_reports:
                                        active_reports[j] = reports[i + j*num_events]
                                        j += 1
                                outcomes_raw[i] = STATISTICS.weighted_median(active_reports, smooth_rep)
                        else:
                            with j = 0:
                                while j < num_reports:
                                    outcomes_raw[i] += fixed_multiply(smooth_rep[j], reports[j*num_events + i])
                                    j += 1
                        i += 1
                with outcomes_adj = array(num_events):
                    with i = 0:
                        while i < num_events:
                            if scaled[i] == 1:
                                outcomes_adj[i] = outcomes_raw[i]
                            else:
                                outcomes_adj[i] = catch(outcomes_raw[i])
                            i += 1
                    with i = 0:
                        while i < num_events:
                            if scaled[i] == 1:
                                outcomes_final[i] = fixed_multiply(outcomes_adj[i], scaled_max[i] - scaled_min[i]) + scaled_min[i]
                            else:
                                outcomes_final[i] = outcomes_adj[i]
                            i += 1

                    with certainty = array(num_events):
                        with i = 0:
                            while i < num_events:
                                with j = 0:
                                    while j < num_reports:
                                        if abs(reports[i + j*num_events] - outcomes_adj[i]) < 0x1197998:
                                            certainty[i] += smooth_rep[j]
                                        j += 1
                                i += 1
                        with total = 0:
                            with i = 0:
                                while i < num_events:
                                    certainty[i] = abs(certainty[i])
                                    total += certainty[i]
                                    i += 1
                            return(outcomes_final, items=num_events)

#inset('macros/constants.se')
#inset('macros/fixed.se')
#inset('macros/arrays.se')
inset('../../macros/constants.sm')
inset('../../macros/fixed.sm')
inset('../../macros/arrays.sm')
