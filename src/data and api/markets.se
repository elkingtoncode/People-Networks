import fxpFunctions as FXP

# Markets' index is the marketID
# Events is a 0 indexed array of events in the market in the format of
    # [1, event, event, 2, event, 3, event, event, event]
    # 1 means dimension 1, 2 is events in dimension 2, 3 is the dimension 3 events
# Sharespurchased keeps track of the number of shares purchased for each outcome
    # sharesPurchased states starts at 1 - (same for participants[].shares[] array)
# Participants is a 0 indexed array of participants, their cashIDs, && the shares in each outcome they've purchased of an event
# a binary outcome state 1 is no, 2 is true, 0 if not determined
# tradingFee is a percent in fixedPoint
# tradingPeriod is which eventexpperiod market expires in
data Markets[](events[], sharesPurchased[], addr2participant[], participants[](participantID, shares[]), lenEvents, currentParticipant, winningOutcomes[], alpha, cumulativeScale, numOutcomes, tradingPeriod, tradingFee, branch)

# @return cost - how much it costs you to buy
#         price - current share price of that outcome after buy
def getSimulatedBuy(market, outcome, amount):
    # lmsr cost calcs
    oldCost = lsLmsr(market)
    sharesPurchased(market)[outcome] += amount
    newCost = lsLmsr(market)
    if newCost <= oldCost:
        sharesPurchased(market)[outcome] -= amount
        return(-2)
    cost = (newCost - oldCost)
    price = self.price(market, outcome)
    sharesPurchased(market)[outcome] -= amount
    return([cost, price], chars=64)

# @return cost - how much you get paid to sell
#         price - current share price of that outcome after sell
def getSimulatedSell(market, outcome, amount):
    # lmsr cost calcs
    oldCost = lsLmsr(market)
    sharesPurchased(market)[outcome] -= amount
    newCost = lsLmsr(market)
    if oldCost <= newCost:
        sharesPurchased(market)[outcome] += amount
        return(-2)
    # these prices are in fixed point
    cost = oldCost - newCost
    price = self.price(market, outcome)
    sharesPurchased(market)[outcome] += amount
    return([cost, price], chars=64)

def getMarketInfo(market):
    lenEvents = self.Markets[market].lenEvents
    info = array(14+lenEvents)
    info[0] = self.Markets[market].currentParticipant
    info[1] = self.Markets[market].alpha
    #info[2] = self.Markets[market].cumulativeScale
    info[2] = self.Markets[market].addr2participant[tx.origin]
    info[3] = self.Markets[market].numOutcomes
    info[4] = self.Markets[market].tradingPeriod
    info[5] = self.Markets[market].tradingFee
    i = 0
    while i < lenEvents:
        info[6+i] = self.Markets[market].events[i]
        i += 1
    info[6+i] = self.Markets[market].winningOutcomes[0]
    info[7+i] = self.Markets[market].winningOutcomes[1]
    info[8+i] = self.Markets[market].winningOutcomes[2]
    info[9+i] = self.Markets[market].winningOutcomes[3]
    info[10+i] = self.Markets[market].winningOutcomes[4]
    info[11+i] = self.Markets[market].winningOutcomes[5]
    info[12+i] = self.Markets[market].winningOutcomes[6]
    info[13+i] = self.Markets[market].winningOutcomes[7]
    return(info: arr)

def getMarketEvents(market):
    i = 0
    lenEvents = self.Markets[market].lenEvents
    events = array(lenEvents)
    while i < lenEvents:
        events[i] = self.Markets[market].events[i]
        i += 1
    return(events: arr)

def getSharesPurchased(market, outcome):
    return(self.Markets[market].sharesPurchased[outcome])

def getParticipantNumber(market, address):
    participantNumber = self.Markets[market].addr2participant[address]
    if(self.Markets[market].participants[participantNumber].participantID != tx.origin):
        return(-1)
    else:
        return(participantNumber)

def getParticipantID(market, participantNumber):
    return(self.Markets[market].participants[participantNumber].participantID)

def getParticipantSharesPurchased(market, participantNumber, outcome):
    return(self.Markets[market].participants[participantNumber].shares[outcome])

def getNumEvents(market):
    return(self.Markets[market].lenEvents)

def getCurrentParticipantNumber(market):
    return(self.Markets[market].currentParticipant)

def getAlpha(market):
    return(self.Markets[market].alpha)

def getCumScale(market):
    return(self.Markets[market].cumulativeScale)

def getMarketNumOutcomes(market):
    return(self.Markets[market].numOutcomes)

def getTradingPeriod(market):
    return(self.Markets[market].tradingPeriod)

def getTradingFee(market):
    return(self.Markets[market].tradingFee)

def getBranchID(market):
    return(self.Markets[market].branch)

# alpha is equal to v/(n*log(n)) where v is the max percent commission
# && n is the number of outcomes people can trade. Alpha is set when
# a market is created.
macro lsLmsr($marketID):
    with $bq = Bq($marketID):
        with $i = 1:
            with $sumExp = 0:
                while $i <= numOutcomes($marketID):
                    $sumExp += FXP.fx_exp(sharesPurchased($marketID)[$i] * 2**64 / $bq)
                    $i += 1
                $bq*FXP.fx_log($sumExp)/2**64

macro sumList($q, $a, $b):
    $i = $a + 1
    $result = $q[$a]
    while $i <= $b:
        $result += $q[$i]
        $i += 1
    $result

macro market($marketID):
    self.Markets[$marketID]

macro alpha($marketID):
    market($marketID).alpha

macro cumScale($marketID):
    market($marketID).cumulativeScale

macro numOutcomes($marketID):
    market($marketID).numOutcomes

macro sharesPurchased($marketID):
    market($marketID).sharesPurchased

macro particpant($marketID, $addr):
    market($marketID).participants[$addr]

macro Bq($marketID):
   alpha($marketID) * cumScale($marketID) * sumList(sharesPurchased($marketID), 1, numOutcomes($marketID)) / 2**64

def lsLmsr(marketID):
    return(lsLmsr(marketID))

def price(market, outcome):
    a = lsLmsr(market)
    sharesPurchased(market)[outcome] += 2**60
    b = lsLmsr(market)
    sharesPurchased(market)[outcome] -= 2**60
    return(((b - a) * 2**64)/2**60)

# check that msg.sender is one of our function contracts
def initializeMarket(marketID, events: arr, tradingPeriod, tradingFee, branch):
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    # add event list to the market
    save(self.Markets[marketID].events[0], events, chars=32*len(events))
    self.Markets[marketID].lenEvents = len(events)
    self.Markets[marketID].tradingPeriod = tradingPeriod
    self.Markets[marketID].tradingFee = tradingFee
    self.Markets[marketID].branch = branch
    return(1)

def addParticipant(market, address):
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    participantNumber = self.Markets[market].currentParticipant
    self.Markets[market].participants[participantNumber].participantID = address
    self.Markets[market].addr2participant[address] = participantNumber
    self.Markets[market].currentParticipant += 1
    return(participantNumber)

def modifyShares(marketID, outcome, amount):
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    sharesPurchased(marketID)[outcome] += amount
    return(1)

def modifyParticipantShares(marketID, participantNumber, outcome, amount):
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    self.Markets[marketID].participants[participantNumber].shares[outcome] += amount
    return(1)

def setWinningOutcomes(market, outcomes: arr):
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    # largest # of winning outcomes is 8
    i = 0
    while outcomes[i] != 0:
        self.Markets[market].winningOutcomes[i] = outcomes[i]
        i += 1
    return(1)
    
def getWinningOutcomes(market):
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    # largest # of winning outcomes is 8
    return(load(self.Markets[market].winningOutcomes[0], chars=32*8): arr)

def initialLiquiditySetup(marketID, alpha, cumScale, numOutcomes):
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    self.Markets[marketID].alpha = alpha
    self.Markets[marketID].cumulativeScale = cumScale
    self.Markets[marketID].numOutcomes = numOutcomes
    return(1)

def getMarketOutcomeInfo(market, outcome):
    info = array(13)
    participantNumber = self.Markets[market].addr2participant[tx.origin]
    info[0] = self.getSharesPurchased(market, outcome)
    info[1] = self.getParticipantSharesPurchased(market, participantNumber, outcome)
    info[2] = self.price(market, outcome)
    info[3] = participantNumber
    info[4] = self.getCurrentParticipantNumber(market)
    info[5] = self.Markets[market].winningOutcomes[0]
    info[6] = self.Markets[market].winningOutcomes[1]
    info[7] = self.Markets[market].winningOutcomes[2]
    info[8] = self.Markets[market].winningOutcomes[3]
    info[9] = self.Markets[market].winningOutcomes[4]
    info[10] = self.Markets[market].winningOutcomes[5]
    info[11] = self.Markets[market].winningOutcomes[6]
    info[12] = self.Markets[market].winningOutcomes[7]
    return(info: arr)
