import branches as BRANCHES

# [branchID][votingPeriod]
# v_size = numReports * numEvents
# reportsFilled, reportsMask, weightedCenteredData, loadingVector, scores, set1, set2, old,
# new1, new2, adjPrinComp, smoothRep, outcomesFinal, consensusReward is all consensus data
# reporters is [reporterID][eventNum]
# reporthash is [reporterID] = hash
data EventsExpDates[][](numberEvents, events[], totalRepReported, totalReputation, reporters[][], reportHash[], vSize, reportsFilled[], reportsMask[], weightedCenteredData[], covarianceMatrixRow[], deflated[], loadingVector[], latent, scores[], set1[], set2[], old[], new1[], new2[], adjPrinComp[], smoothRep[], outcomesFinal[], reporterPayouts[])

# atm voters who do vote are req. to vote on all things in their respective ballots (even if just a 0 / no vote)
# ballot should be all votes for events in order of the events from self.Reporting[branch].eventsExpDates[w/eVotingPeriodShouldBe].numberEvents
# w/ this function you can get the eventIDs and report on outcomes 
 # make sure in this function to check that the report value is not >maxvalue or <minvalue for the event
# ui will want to alert users of any hey we're behind but atm you should really be voting on this voting period situation (anything meeting the req. of vote if we were caught up)
# @returns a ballot of events (UI needs to vote w/ a ballot of reports in this order per corresponding event)
# @return all events in a branch and expiration period
def getEvents(branch, expDateIndex):
    numEvents = self.EventsExpDates[branch][expDateIndex].numberEvents
    events = array(numEvents)
    i = 0
    while i < numEvents:
        events[i] = self.EventsExpDates[branch][expDateIndex].events[i]
        i += 1
    return(events: arr)

def getNumberEvents(branch, expDateIndex):
	return(self.EventsExpDates[branch][expDateIndex].numberEvents)

def getEvent(branch, expDateIndex, eventIndex):
	return(self.EventsExpDates[branch][expDateIndex].events[eventIndex])

def getTotalReputation(branch, expDateIndex):
    return(self.EventsExpDates[branch][expDateIndex].totalReputation)

def getTotalRepReported(branch, expDateIndex):
	return(self.EventsExpDates[branch][expDateIndex].totalRepReported)

def getReporterBallot(branch, expDateIndex, reporterID):
	return(load(self.EventsExpDates[branch][expDateIndex].reporters[reporterID][0], chars=32*self.EventsExpDates[branch][expDateIndex].numberEvents): arr)

def getReport(branch, expDateIndex, reporter, reportNum):
	return(self.EventsExpDates[branch][expDateIndex].reporters[reporter][reportNum])

def getReportHash(branch, expDateIndex, reporter):
	return(self.EventsExpDates[branch][expDateIndex].reportHash[reporter])

def getVSize(branch, expDateIndex):
    return(self.EventsExpDates[branch][expDateIndex].vSize)

def getReportsFilled(branch, expDateIndex):
	return(load(self.EventsExpDates[branch][expDateIndex].reportsFilled[0], chars=32*self.EventsExpDates[branch][expDateIndex].vSize): arr)

def getReportsMask(branch, expDateIndex):
	return(load(self.EventsExpDates[branch][expDateIndex].reportsMask[0], chars=32*self.EventsExpDates[branch][expDateIndex].vSize): arr)

def getWeightedCenteredData(branch, expDateIndex):
	return(load(self.EventsExpDates[branch][expDateIndex].weightedCenteredData[0], chars=32*self.EventsExpDates[branch][expDateIndex].vSize): arr)

def getCovarianceMatrixRow(branch, expDateIndex):
    return(load(self.EventsExpDates[branch][expDateIndex].covarianceMatrixRow[0], chars=32*self.EventsExpDates[branch][expDateIndex].numberEvents): arr)

def getDeflated(branch, expDateIndex):
    return(load(self.EventsExpDates[branch][expDateIndex].deflated[0], chars=32*self.EventsExpDates[branch][expDateIndex].vSize): arr)

def getLoadingVector(branch, expDateIndex):
    return(load(self.EventsExpDates[branch][expDateIndex].loadingVector[0], chars=32*(self.EventsExpDates[branch][expDateIndex].numberEvents+2)): arr)

def getLatent(branch, expDateIndex):
    return(self.EventsExpDates[branch][expDateIndex].latent)

def getScores(branch, expDateIndex):
	return(load(self.EventsExpDates[branch][expDateIndex].scores[0], chars=32*(self.EventsExpDates[branch][expDateIndex].vSize/self.EventsExpDates[branch][expDateIndex].numberEvents)): arr)

def getSetOne(branch, expDateIndex):
	return(load(self.EventsExpDates[branch][expDateIndex].set1[0], chars=32*(self.EventsExpDates[branch][expDateIndex].vSize/self.EventsExpDates[branch][expDateIndex].numberEvents)): arr)

def getSetTwo(branch, expDateIndex):
	return(load(self.EventsExpDates[branch][expDateIndex].set2[0], chars=32*(self.EventsExpDates[branch][expDateIndex].vSize/self.EventsExpDates[branch][expDateIndex].numberEvents)): arr)

def returnOld(branch, expDateIndex):
	return(load(self.EventsExpDates[branch][expDateIndex].old[0], chars=32*self.EventsExpDates[branch][expDateIndex].numberEvents): arr)

def getNewOne(branch, expDateIndex):
	return(load(self.EventsExpDates[branch][expDateIndex].new1[0], chars=32*self.EventsExpDates[branch][expDateIndex].numberEvents): arr)

def getNewTwo(branch, expDateIndex):
	return(load(self.EventsExpDates[branch][expDateIndex].new2[0], chars=32*self.EventsExpDates[branch][expDateIndex].numberEvents): arr)

def getAdjPrinComp(branch, expDateIndex):
	return(load(self.EventsExpDates[branch][expDateIndex].adjPrinComp[0], chars=32*(self.EventsExpDates[branch][expDateIndex].vSize/self.EventsExpDates[branch][expDateIndex].numberEvents)): arr)

def getSmoothRep(branch, expDateIndex):
	return(load(self.EventsExpDates[branch][expDateIndex].smoothRep[0], chars=32*(self.EventsExpDates[branch][expDateIndex].vSize/self.EventsExpDates[branch][expDateIndex].numberEvents)): arr)

def getOutcomesFinal(branch, expDateIndex):
	return(load(self.EventsExpDates[branch][expDateIndex].outcomesFinal[0], chars=32*self.EventsExpDates[branch][expDateIndex].numberEvents): arr)

def getReporterPayouts(branch, expDateIndex):
    return(load(self.EventsExpDates[branch][expDateIndex].reporterPayouts[0], chars=32*self.EventsExpDates[branch][expDateIndex].numberEvents): arr)

# check that msg.sender is one of our function contracts
def addEvent(branch, futurePeriod, eventID):
	#if(!self.whitelist.check(msg.sender)):
	#	return(-1)
	self.EventsExpDates[branch][futurePeriod].events[self.EventsExpDates[branch][futurePeriod].numberEvents] = eventID
	self.EventsExpDates[branch][futurePeriod].numberEvents += 1
	return(1)

def setTotalRepReported(branch, expDateIndex, repReported):
	#if(!self.whitelist.check(msg.sender)):
	#	return(-1)
	self.EventsExpDates[branch][expDateIndex].totalRepReported = repReported
	return(1)

def setTotalReputation(branch, expDateIndex, totalReputation):
    self.EventsExpDates[branch][expDateIndex].totalReputation = totalReputation
    return(1)

def setReporterBallot(branch, expDateIndex, reporterID, report: arr, reputation):
	#if(!self.whitelist.check(msg.sender)):
	#	return(-1)
	save(self.EventsExpDates[branch][expDateIndex].reporters[reporterID][0], report, chars=32*len(report))
	self.EventsExpDates[branch][expDateIndex].totalRepReported += reputation
	return(1)

def setVSize(branch, expDateIndex, vSize):
	#if(!self.whitelist.check(msg.sender)):
	#	return(-1)
	self.EventsExpDates[branch][expDateIndex].vSize = vSize
	return(1)

def setReportsFilled(branch, expDateIndex, reportsFilled: arr):
	#if(!self.whitelist.check(msg.sender)):
	#	return(-1)
	save(self.EventsExpDates[branch][expDateIndex].reportsFilled[0], reportsFilled, chars=32*len(reportsFilled))
	return(1)

def setReportsMask(branch, expDateIndex, reportsMask: arr):
	#if(!self.whitelist.check(msg.sender)):
	#	return(-1)
	save(self.EventsExpDates[branch][expDateIndex].reportsMask[0], reportsMask, chars=32*len(reportsMask))
	return(1)

def setWeightedCenteredData(branch, expDateIndex, weightedCenteredData: arr):
	#if(!self.whitelist.check(msg.sender)):
	#	return(-1)
	save(self.EventsExpDates[branch][expDateIndex].weightedCenteredData[0], weightedCenteredData, chars=32*len(weightedCenteredData))
	return(1)

def setCovarianceMatrixRow(branch, expDateIndex, covarianceMatrixRow: arr):
    #if !self.whitelist.check(msg.sender):
     #   return(-1)
    save(self.EventsExpDates[branch][expDateIndex].covarianceMatrixRow[0], covarianceMatrixRow, chars=32*len(covarianceMatrixRow))
    return(1)

def setDeflated(branch, expDateIndex, deflated: arr):
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    save(self.EventsExpDates[branch][expDateIndex].deflated[0], deflated, chars=32*len(deflated))
    return(1)

def setLoadingVector(branch, expDateIndex, loadingVector: arr):
	#if(!self.whitelist.check(msg.sender)):
	#	return(-1)
	save(self.EventsExpDates[branch][expDateIndex].loadingVector[0], loadingVector, chars=32*len(loadingVector))
	return(1)

def setLatent(branch, expDateIndex, latent):
    #if !self.whitelist.check(msg.sender):
    #   return(-1)
    self.EventsExpDates[branch][expDateIndex].latent = latent
    return(1)

def setScores(branch, expDateIndex, scores: arr):
	#if(!self.whitelist.check(msg.sender)):
	#	return(-1)
	save(self.EventsExpDates[branch][expDateIndex].scores[0], scores, chars=32*len(scores))
	return(1)

def setSetOne(branch, expDateIndex, setOne: arr):
	#if(!self.whitelist.check(msg.sender)):
	#	return(-1)
	save(self.EventsExpDates[branch][expDateIndex].set1[0], setOne, chars=32*len(setOne))
	return(1)

def setSetTwo(branch, expDateIndex, setTwo: arr):
	#if(!self.whitelist.check(msg.sender)):
	#	return(-1)
	save(self.EventsExpDates[branch][expDateIndex].set2[0], setTwo, chars=32*len(setTwo))
	return(1)

def setOld(branch, expDateIndex, setOld: arr):
	#if(!self.whitelist.check(msg.sender)):
	#	return(-1)
	save(self.EventsExpDates[branch][expDateIndex].old[0], setOld, chars=32*len(setOld))
	return(1)

def setNewOne(branch, expDateIndex, newOne: arr):
	#if(!self.whitelist.check(msg.sender)):
	#	return(-1)
	save(self.EventsExpDates[branch][expDateIndex].new1[0], newOne, chars=32*len(newOne))
	return(1)

def setNewTwo(branch, expDateIndex, newTwo: arr):
	# if(!self.whitelist.check(msg.sender)):
	# 	return(-1)
	save(self.EventsExpDates[branch][expDateIndex].new2[0], newTwo, chars=32*len(newTwo))
	return(1)

def setAdjPrinComp(branch, expDateIndex, adjPrinComp: arr):
	#if(!self.whitelist.check(msg.sender)):
	#	return(-1)
	save(self.EventsExpDates[branch][expDateIndex].adjPrinComp[0], adjPrinComp, chars=32*len(adjPrinComp))
	return(1)

def setSmoothRep(branch, expDateIndex, smoothRep: arr):
	#if(!self.whitelist.check(msg.sender)):
	#	return(-1)
	save(self.EventsExpDates[branch][expDateIndex].smoothRep[0], smoothRep, chars=32*len(smoothRep))
	return(1)

def setOutcomesFinal(branch, expDateIndex, outcomesFinal: arr):
	#if(!self.whitelist.check(msg.sender)):
	#	return(-1)
	save(self.EventsExpDates[branch][expDateIndex].outcomesFinal[0], outcomesFinal, chars=32*len(outcomesFinal))
	return(1)

def setReporterPayouts(branch, expDateIndex, reporterPayouts: arr):
    #if(!self.whitelist.check(msg.sender)):
    #   return(-1)
    save(self.EventsExpDates[branch][expDateIndex].reporterPayouts[0], reporterPayouts, chars=32*len(reporterPayouts))
    return(1)

def setReportHash(branch, expDateIndex, reporter, reportHash):
	#if(!self.whitelist.check(msg.sender)):
	#	return(-1)
	self.EventsExpDates[branch][expDateIndex].reportHash[reporter] = reportHash
	return(1)

def moveEventsToCurrentPeriod(branch, currentVotePeriod, currentPeriod):
    #if(!self.whitelist.check(msg.sender)):
    #    return(-1)
    x = 0
    while(x < self.EventsExpDates[branch][currentVotePeriod-1].numberEvents):
        self.EventsExpDates[branch][currentPeriod].events[self.EventsExpDates[branch][currentPeriod].numberEvents] = self.EventsExpDates[branch][currentVotePeriod-1].events[x]
        self.EventsExpDates[branch][currentPeriod].numberEvents += 1
        # sub and set old period event to 0 poss.?
        x += 1
    return(1)
