import branches as BRANCHES
import expiringEvents as EXPEVENTS
import info as INFO
import cash as CASH
import reporting as REPORTING

# a no vote is -2^64, a yes vote is 2^64 && a can't determine vote is 3*2^63 (a empty ballot is 0)
# atm voters who do vote are req. to vote on all things in their respective ballots (rest just auto .5 them)
# ui should handle this by filling in things you didn't vote on automatically & ask to be sure you didn't want to vote on them
# UI makeBallot function does this
    # ballot should be all votes for events in order of the events from self.Reporting[branch].eventsExpDates[votePeriod].numberEvents
    # && loop through the events[] array fr2om 0 to numberEvents -1 for the votes list / order
# people could report something like 16027*2^64 for a scalar
# if people get behind on voting (e.g the redeem tx isn't called <1 period after it can be called)
    # voteperiod is an optional parameter only used in the scenario that we get behind on voting periods
    # so people will need to vote on periods that are upcoming even if our currentVotePeriod is a bit behind (e.g. if current expperiod is 7 you should vote on stuff from voteperiod 6 (and then upon period 8 you can't vote anymore))
# @return 1 if success
# Error messages otherwise
    # -1: report isn't long enough
    # -2: reporter (you) doesn't (don't) exist, or voting period over or hasn't starred yet
    # -3: hash doesn't match
    # -4: no rep
def report(branch, report:arr, votePeriod, salt):
    # make sure the branch exists
    repIndex = REPORTING.repIDToIndex(branch, tx.origin)
    periodLength = BRANCHES.getPeriodLength(branch)
    residual = block.number % periodLength
    if(residual > periodLength/2):
        # submit salt and votes
        # need report length to be same as number of items in the current eventexpdates voting period events!
        if(len(report)!=EXPEVENTS.getNumberEvents(branch, votePeriod)):
            return(-1)
        if(REPORTING.getRepBalance(branch, tx.origin)==0):
            return(-4)

        realHash = EXPEVENTS.getReportHash(branch, votePeriod, tx.origin)
        hashInfo = array(len(report) + 2)
        hashInfo[0] = tx.origin
        hashInfo[1] = salt
        i = 2
        while i < (len(report) + 2):
            hashInfo[i] = report[i-2]
            i += 1
        reportHash = sha256(hashInfo, chars=32*len(hashInfo))
        if(reportHash!=realHash):
            (return(-3))

        # if currentExpPeriod is more than 2 periods past the current vote period
        # then there can be no more voting for that voting period
        # (reasoning being: >=1 period past means all the events in that period have expired)
        # (>=2 periods past mean the events have exp. & people have had 1 full period to vote)
        # currently requires events to expire to vote
        currentExpPeriod = (block.number / periodLength)
        if (REPORTING.getReporterID(branch, repIndex) != tx.origin || currentExpPeriod >= (votePeriod+2) || currentExpPeriod < (votePeriod+1)):
            return(-2)

        reputation = REPORTING.getRepBalance(branch, tx.origin)
        # need to update stuff for quorem
        # && store the report && the rep value
        if(EXPEVENTS.setReporterBallot(branch, votePeriod, tx.origin, report, reputation)):
            return(1)
        else:
            return(0)

# Error -1: reporter (you) doesn't (don't) exist, or voting period over or hasn't starred yet
# Error -2: not in hash submitting timeframe
# Python code to get the hash:
    #from bitcoin import encode
    #from hashlib import sha256
    #def sha256list(xs):
    #    data = ''.join(encode(x, 256, 32) for x in xs)
    #    hashed = int(sha256(data).hexdigest(), 16)
    #    if hashed > 2**255:
    #        return hashed - 2**256
    #    else:
    #        return hashed
def submitReportHash(branch, reportHash, votePeriod):
    # make sure the branch exists
    repIndex = REPORTING.repIDToIndex(branch, tx.origin)
    periodLength = BRANCHES.getPeriodLength(branch)
    residual = block.number % periodLength
    currentExpPeriod = (block.number / periodLength)
    if (REPORTING.getReporterID(branch, repIndex) != tx.origin || currentExpPeriod >= (votePeriod+2) || currentExpPeriod < (votePeriod+1)):
        return(-1)
    if(residual < periodLength/2):
        # submit hash of (tx.origin, salt, Votes[])
        if(EXPEVENTS.setReportHash(branch, votePeriod, tx.origin, reportHash)):
            return(1)
        else:
            return(0)
    else:
        return(-2)

# for ui client side
# @return 1 if success
# Error messages otherwise
    # -1: report isn't long enough
    # -2: reporter (you) doesn't (don't) exist, or voting period over or hasn't starred yet
def checkReportValidity(branch, report:arr, votePeriod):
       if(len(report)!=EXPEVENTS.getNumberEvents(branch, votePeriod)):
        return(-1)

        # if currentExpPeriod is more than 2 periods past the current vote period
        # then there can be no more voting for that voting period
        # (reasoning being: >=1 period past means all the events in that period have expired)
        # (>=2 periods past mean the events have exp. & people have had 1 full period to vote)
        # currently requires events to expire to vote
        currentExpPeriod = (block.number / BRANCHES.getPeriodLength(branch))
        if (REPORTING.getReporterID(branch, repIndex) != tx.origin || currentExpPeriod >= (votePeriod+2) || currentExpPeriod < (votePeriod+1)):
            return(-2)
        else:
            return(1)

# anti cheat provide ballot and randomNum mechanism steal deposit
def slashRep(branch, votePeriod, salt, report:arr, reporter):
        realHash = EXPEVENTS.getReportHash(branch, votePeriod, reporter)
        hashInfo = array(len(report) + 2)
        hashInfo[0] = reporter
        hashInfo[1] = salt
        i = 2
        while i < (len(report) + 2):
            hashInfo[i] = report[i]
            i += 1
        reportHash = sha256(hashInfo, chars=32*len(hashInfo))
        if(reportHash!=realHash):
            return(0)
        else:
            reporterIndex = REPORTING.repIDToIndex(branch, reporter)
            trutherIndex = REPORTING.repIDToIndex(branch, tx.origin)
            # if the truther's rep. account doesn't exist, make one
            if(REPORTING.getReporterID(branch, trutherIndex)!=tx.origin):
                trutherIndex = REPORTING.getNumberReporters(branch)
                REPORTING.addReporter(branch, tx.origin)

            if(REPORTING.getReporterID(branch, reporterIndex)!=reporter):
                return(-2)

            reporterBalance = REPORTING.getRepBalance(branch, reporter)

            REPORTING.subtractRep(branch, reporterIndex, reporterBalance)
            REPORTING.addRep(branch, trutherIndex, reporterBalance*2^58 / 2^64)
        return(reporterBalance)
