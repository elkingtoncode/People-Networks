import branches as BRANCHES
import expiringEvents as EXPEVENTS
import info as INFO
import cash as CASH
import reporting as REPORTING
import fxpFunctions as FXP
import markets as MARKETS
import events as EVENTS

data nonces[]

event updatePrice(user:indexed, market:indexed, outcome:indexed, price, cost)


# amount of shares should be fixed point
# @return return price + fee to buy shares
# Error messages otherwise
    # -1: invalid outcome or trading closed
    # -2: entered a -amt of shares
    # -3: not enough money / limit order too low
    # -4: bad nonce/hash
def buyShares(branch, market, outcome, amount, nonce, limit):
    # can trade up until the event has started to be voted on (e.g. currentVotePeriod is >= to the latest expDate/periodLength)  
    # if we have 3-4 cycles in a row of events getting pushed back market would already be closed even though
    # events up to be decided on for a while yet never decided
    # technically this is a stalled branch and market should be open
    # if(currentPeriod >= currentVotePeriod +3) we're stalled
    #the question is though --- are these events part of the set that were stalled?
    #if above && the event outcomes aren't determined (0), then yes
    #then set a stalled boolean

    #if !good_pow():
    #    return(-4)
    inc_nonce()
    stalled = 0
    currentPeriod = block.number / BRANCHES.getPeriodLength(branch)
    currentVotePeriod = BRANCHES.getVotePeriod(branch)
    numEvents = MARKETS.getNumEvents(market)
    events = MARKETS.getMarketEvents(market, outitems=numEvents)
    if(currentPeriod >= (currentVotePeriod+3)):
        c = 0
        while c < numEvents:
            if(EVENTS.getOutcome(events[c])==0):
                c += 1
            else:
                return(-1)
        stalled = 1
    if (outcome==0 || (currentVotePeriod>=MARKETS.getTradingPeriod(market) && !stalled) || MARKETS.getBranchID(market) != branch):
        return(-1)
    # lmsr cost calcs
    oldCost = MARKETS.lsLmsr(market)
    MARKETS.modifyShares(market, outcome, amount)
    newCost = MARKETS.lsLmsr(market)
    if newCost <= oldCost:
        MARKETS.modifyShares(market, outcome, -amount)
        return(0)
    price = (newCost - oldCost)
    
    if(CASH.balance(tx.origin) < price*(MARKETS.getTradingFee(market) + 2^64)/2^64 or (limit!=0 and (price*2^64/amount)>limit)):
        MARKETS.modifyShares(market, outcome, -amount)
        return(-3)

    participantNumber = MARKETS.getParticipantNumber(market, tx.origin)

    # if participant doesn't exist in market, add them
    if(tx.origin != MARKETS.getParticipantID(market, participantNumber)):
        participantNumber = MARKETS.addParticipant(market, tx.origin)

    MARKETS.modifyParticipantShares(market, participantNumber, outcome, amount)
    # send shares of the event to user address
    # if user doesn't have enough money, revert
    # send money from user acc. to market address/account
    # cost for shares
    CASH.send(market, price)
    # half of fees to market creator
    fee = MARKETS.getTradingFee(market)*price/2^64
    CASH.send(INFO.getCreator(market), fee/2)
    # other half go to branch
    CASH.send(branch, fee/2)
    # log new price & avg price paid/share
    log(type=updatePrice, tx.origin, market, outcome, MARKETS.price(market, outcome), -price*2^64/amount)
    return(price+fee)

# amount is amount of shares to sell
# instead of inputting particip. num could just loop through array if dont have it
# @return error msg if fail, returns amount you get paid if success
# Error messages otherwise
    # -1: invalid outcome, trading closed, or you haven't traded in this market
    # -2: entered a -amt of shares
    # -3: you own no shares / limit price too high
def sellShares(branch, market, outcome, amount, nonce, limit):
    #if !good_pow():
    #    return(-4)
    inc_nonce()
    # can trade up until the event has started to be voted on (e.g. currentVotePeriod is >= to the latest expDate/periodLength)
    participantNumber = MARKETS.getParticipantNumber(market, tx.origin)
    stalled = 0
    currentPeriod = block.number / BRANCHES.getPeriodLength(branch)
    currentVotePeriod = BRANCHES.getVotePeriod(branch)
    numEvents = MARKETS.getNumEvents(market)
    events = MARKETS.getMarketEvents(market, outitems=numEvents)
    if((currentPeriod + 3) >= currentVotePeriod):
        c = 0
        while c < numEvents:
            if(EVENTS.getOutcome(events[c])==0):
                c += 1
            else:
                return(-1)
        stalled = 1
    if (MARKETS.getParticipantID(market, participantNumber) != tx.origin || outcome==0 || (currentVotePeriod>=MARKETS.getTradingPeriod(market) && !stalled) || MARKETS.getBranchID(market) != branch):
        return(-1)
    # lmsr cost calcs
    oldCost = MARKETS.lsLmsr(market)
    MARKETS.modifyShares(market, outcome, -amount)
    newCost = MARKETS.lsLmsr(market)
    if oldCost <= newCost:
        MARKETS.modifyShares(market, outcome, amount)
        return(-2)
    # these prices are in fixed point
    price = oldCost - newCost
    # remove shares from the user's account
    # if user actually doesn't have the shares, revert
    if (MARKETS.getParticipantSharesPurchased(market, participantNumber, outcome) < amount or (price*2^64/amount)<limit):
        MARKETS.modifyShares(market, outcome, amount)
        return(-3)
    else:
        # send bitcoin from the market to the user acc.
        CASH.subtractCash(market, price)
        fee = MARKETS.getTradingFee(market)*price/2^64
        # half of fees go to market creator
        CASH.addCash(INFO.getCreator(market), fee/2)
        # half go to branch
        CASH.addCash(branch, fee/2)
        price -= fee
        CASH.addCash(tx.origin, price)
        MARKETS.modifyParticipantShares(market, participantNumber, outcome, -amount)
        # log new price and avg. price sold / share
        log(type=updatePrice, tx.origin, market, outcome, MARKETS.price(market, outcome), price*2^64/amount)
        return(price)

macro good_pow():
    with $data = array(4):
        $data[0] = branch
        $data[1] = market
        $data[2] = tx.origin
        $data[3] = self.nonces[tx.origin]
        with $firstHash = sha3($data, chars=4*32):
            with $data2 = array(2):
                $data2[0] = $firstHash
                $data2[1] = nonce
                lt(sha3($data2, chars=2*32), 2^254/10000)

macro inc_nonce():
    self.nonces[tx.origin] += 1

def getNonce(ID):
    return(self.nonces[ID])
