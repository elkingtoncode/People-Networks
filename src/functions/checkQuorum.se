# This software (Augur) allows buying && selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation 
#    This program is free software; you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is free software: you can redistribute it &&/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

import branches as BRANCHES
import expiringEvents as EXPEVENTS

# extern branches.se: [addMarket:ii:i, getBranch:i:i, getBranches:_:a, getMarkets:i:a, getMinTradingFee:i:i, getNumBranches:_:i, getNumMarkets:i:i, getPeriodLength:i:i, getStep:i:i, getVotePeriod:i:i, incrementPeriod:i:i, incrementStep:i:i, initializeBranch:iiii:i, setStep:ii:i, setSubstep:ii:i]
# BRANCHES = 0x13dc5836cd5638d0b81a1ba8377a7852d41b5bbe

# extern expiringEvents.se: [addEvent:iii:i, getAdjPrinComp:ii:a, getEvent:iii:i, getEvents:ii:a, getLoadingVector:ii:a, getNewOne:ii:a, getNewTwo:ii:a, getNumberEvents:ii:i, getOutcomesFinal:ii:a, getReport:iiii:i, getReportHash:iii:i, getReporterBallot:iii:a, getReportsFilled:ii:a, getReportsMask:ii:a, getScores:ii:a, getSetOne:ii:a, getSetTwo:ii:a, getSmoothRep:ii:a, getTotalRepReported:ii:i, getVSize:ii:i, getWeightedCenteredData:ii:a, makeBallot:ii:a, moveEventsToCurrentPeriod:iii:i, returnOld:ii:a, setAdjPrinComp:iia:i, setLoadingVector:iia:i, setNewOne:iia:i, setNewTwo:iia:i, setOld:iia:i, setOutcomesFinal:iia:i, setReportHash:iiii:i, setReporterBallot:iiiai:i, setReportsFilled:iia:i, setReportsMask:iia:i, setScores:iia:i, setSetOne:iia:i, setSetTwo:iia:i, setSmoothRep:iia:i, setTotalRepReported:iii:i, setVSize:iii:i, setWeightedCenteredData:iia:i]
# EXPEVENTS = 0x61d90fd4c1c3502646153003ec4d5c177de0fb58

# returns whether a quorem has a matured event
# if there aren't enough events in a vote period eventsexpdate, push them to the current period and increment the vote period
# @return 0 if fail, 1 if success
def checkQuorum(branch):
    currentVotePeriod = BRANCHES.getVotePeriod(branch)
    currentPeriod = (block.number / BRANCHES.getPeriodLength(branch))
    # provided the currentPeriod is >=2 periods past the things we're going to rbcr on
    # we can then conclude it has matured && people have had time to vote
    matured = 0
    enoughEvents = 0
    enoughUpcoming = 0
    if (currentPeriod >= (currentVotePeriod+2)):
        matured = 1

    # min future decisions at stake - 200 - else branch stalls (do same thing we do if min ballot/event size isn't met,
    # push events into current period and hopefully more people will create decisions so it can actually be voted on, else repeat)
    # should 0 out stuff in if statement here
    upcomingDecisions = 0
    b = currentVotePeriod
    while b < (currentVotePeriod+100):
        upcomingDecisions += EXPEVENTS.getNumberEvents(branch, b)
        b += 1

    # normally < 30 and < 500 respectively, lowered for testing
    if ((EXPEVENTS.getNumberEvents(branch, currentVotePeriod) < 5 || upcomingDecisions < 10) && matured):
        BRANCHES.incrementPeriod(branch)
        BRANCHES.setStep(branch, 0)
        BRANCHES.setSubstep(branch, 0)
        currentVotePeriod = BRANCHES.getVotePeriod(branch)
        EXPEVENTS.moveEventsToCurrentPeriod(branch, currentVotePeriod, currentPeriod)
    else:
        if(EXPEVENTS.getTotalRepReported(branch, currentVotePeriod)==0 && matured):
            BRANCHES.incrementPeriod(branch)
            BRANCHES.setStep(branch, 0)
            BRANCHES.setSubstep(branch, 0)
            currentVotePeriod = BRANCHES.getVotePeriod(branch)
            EXPEVENTS.moveEventsToCurrentPeriod(branch, currentVotePeriod, currentPeriod)
            enoughEvents = 0
            enoughUpcoming = 0
        else:
            enoughEvents = 1
            enoughUpcoming = 1

    if(matured && enoughEvents && enoughUpcoming):
        return(1)
    else:
        return(0)
        # return([currentPeriod, currentVotePeriod, matured, EXPEVENTS.getNumberEvents(branch, currentVotePeriod), upcomingDecisions]:arr)
