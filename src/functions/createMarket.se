import branches as BRANCHES
import info as INFO
import cash as CASH
import reporting as REPORTING
import fxpFunctions as FXP
import markets as MARKETS
import events as EVENTS

event creationBlock(market:indexed)

# alpha is a fixedpoint number / calc. it in UI
# z is the optimal initial vector for each outcome
# z = liquidity / (1+(alpha*n*ln(n)))
# initialLiquidity is initial number of cash in each outcome you want to buy/initialize/set
# tradingFee is a percent in fixedPoint
# same for these values
# @return marketID if success
# error messages otherwise:
#   -1: bad input or parent doesn't exist
#   -2: too many events
#   -3: too many outcomes
#   -4: not enough money or market already exists

def createMarket(branch, description:str, alpha, initialLiquidity, tradingFee, events:arr):
    periodLength = BRANCHES.getPeriodLength(branch)
    if(periodLength==0 or len(description)==0 or initialLiquidity==0 or alpha <= 2^57 or tradingFee < BRANCHES.getMinTradingFee(branch)):
        return(-1)
    if(tradingFee > 2^61):
        return(-1)
    event = events[0]

    # check that events have same exp. dates && branch
    i = 0
    eventNum = len(events)

    # only supports 3 dimensional markets atm
    if(eventNum > 3):
        return(-2)

    numOutcomes = 0
    eventsConcat = 0
    cumulativeScale = 0
    tradingPeriod = 0
    while i < eventNum:
        event = events[i]
        expirationDate = EVENTS.getExpiration(event)
        if(expirationDate > tradingPeriod):
            tradingPeriod = expirationDate
        eventsConcat += event
        if (EVENTS.getEventBranch(event) != branch || !INFO.getCreator(event)):
            return(-1)

        # scalars
        maxValue = EVENTS.getMaxValue(event)
        if(maxValue!=1 && EVENTS.getNumOutcomes(event)==2):
            # is a valid scalar
            cumulativeScale += maxValue - EVENTS.getMinValue(event)
        eventNumOutcomes = EVENTS.getNumOutcomes(event)
        if(i==0):
            numOutcomes += eventNumOutcomes
        else:
            numOutcomes *= eventNumOutcomes
        i += 1
    if(numOutcomes > 200):
        return(-3)
    if(cumulativeScale==0):
        cumulativeScale = 1
    tradingPeriod = (tradingPeriod / periodLength)

    # formation of marketID (hash)
    marketinfo = string(11*32 + len(description))
    marketinfo[0] = MARKET
    marketinfo[1] = tx.origin
    marketinfo[2] = initialLiquidity
    marketinfo[3] = branch
    marketinfo[4] = eventsConcat
    marketinfo[5] = len(events)
    marketinfo[6] = cumulativeScale
    marketinfo[7] = alpha
    marketinfo[8] = numOutcomes
    marketinfo[9] = tradingPeriod
    marketinfo[10] = tradingFee
    mcopy(marketinfo + 11*32, description, chars=len(description))
    marketID = sha256(marketinfo, chars=len(marketinfo))
    log(type=creationBlock, marketID)

    # pay numOutcomes fee
    # if it's already been created return 0
    if(!CASH.send(branch, numOutcomes*2^63) || INFO.getCreator(marketID) || MARKETS.getMarketNumOutcomes(marketID)):
        return(-4)

    # buy some of all outcomes
    # ls-lmsr needs at least a very small initial liquidity
    y = 1
    z = initialLiquidity * 2**64 / (2**64 + alpha*cumulativeScale*FXP.fx_log(initialLiquidity)/2**64)
    MARKETS.initialLiquiditySetup(marketID, alpha, cumulativeScale, numOutcomes)
    while y <= numOutcomes:
        MARKETS.modifyShares(marketID, y, z)
        y += 1

    if(INFO.setInfo(marketID, description, tx.origin, initialLiquidity) && BRANCHES.addMarket(branch, marketID) && MARKETS.initializeMarket(marketID, events, tradingPeriod, tradingFee, branch) && CASH.send(marketID, initialLiquidity)):
        return(marketID)

    # revert shares bought and other variables
    else:
        v = 1
        while v <= numOutcomes:
            MARKETS.modifyShares(marketID, v, -z)
            v += 1
        MARKETS.initialLiquiditySetup(marketID, 0, 0, 0)
        return(-4)
