import events as EVENTS
import expiringEvents as EXPIRING
import reporting as REPORTING
import branches as BRANCHES
import checkQuorum as QUORUM
import redeem_interpolate as REDEEM_INTERPOLATE
import redeem_center as REDEEM_CENTER
import redeem_score as REDEEM_SCORE
import redeem_adjust as REDEEM_ADJUST
import redeem_resolve as REDEEM_RESOLVE
import redeem_payout as REDEEM_PAYOUT

# - 50% of fees already distributed to market creators
#   all remaining fees go to reporters
# - what if not enough consensus or not enough events expiring upcoming
# @return next step or loop index (see below), for final call return new voting period
def dispatch(branch):
    if !BRANCHES.getStep(branch) and !QUORUM.checkQuorum(branch):
        return(-1)
    with period = BRANCHES.getVotePeriod(branch):
        with num_events = EXPIRING.getNumberEvents(branch, period):
            with num_reports = REPORTING.getNumberReporters(branch):
                with flatsize = num_events * num_reports:
                    with step = BRANCHES.getStep(branch):
                        if step == 10:
                            REDEEM_PAYOUT.payout(branch, period, num_events, num_reports, flatsize)
                            BRANCHES.setStep(branch, 0) # reset step
                            BRANCHES.incrementPeriod(branch)
                            return(period + 1)
                        elif step == 0:
                            EXPIRING.setTotalReputation(branch, period, REPORTING.getTotalRep(branch))
                            REDEEM_INTERPOLATE.read_ballots(branch, period, num_events, num_reports, flatsize)
                        elif step == 1:
                            REDEEM_INTERPOLATE.interpolate(branch, period, num_events, num_reports, flatsize)
                        elif step == 2:
                            REDEEM_CENTER.center(branch, period, num_events, num_reports, flatsize)
                        elif step == 3:
                            REDEEM_CENTER.covariance(branch, period, num_events, num_reports, flatsize)
                        
                        # loop MAX_COMPONENTS
                        elif step == 4:
                            with substep = BRANCHES.getSubstep(branch):
                                if substep == 0:
                                    REDEEM_SCORE.blank(branch, period, num_events, num_reports, flatsize)
                                    BRANCHES.incrementSubstep(branch)
                                    return(step)
                                
                                # loop MAX_ITERATIONS
                                elif substep == 1:
                                    if REDEEM_SCORE.loadings(branch, period, num_events, num_reports, flatsize) == 0:
                                        BRANCHES.incrementSubstep(branch)
                                    return(step)

                                elif substep == 2:
                                    REDEEM_SCORE.latent(branch, period, num_events, num_reports, flatsize)
                                    BRANCHES.incrementSubstep(branch)
                                    return(step)
                                elif substep == 3:
                                    REDEEM_SCORE.deflate(branch, period, num_events, num_reports, flatsize)
                                    BRANCHES.incrementSubstep(branch)
                                    return(step)
                                else:
                                    with more = REDEEM_SCORE.score(branch, period, num_events, num_reports, flatsize):
                                        BRANCHES.setSubstep(branch, 0)
                                        if more == 1:
                                            return(step)
                                        else:
                                            BRANCHES.incrementStep(branch)
                                            return(step + 1)

                        elif step == 5:
                            REDEEM_ADJUST.reputation_delta(branch, period, num_events, num_reports, flatsize)
                        elif step == 6:
                            REDEEM_ADJUST.weighted_delta(branch, period, num_events, num_reports, flatsize)
                        elif step == 7:
                            REDEEM_ADJUST.select_scores(branch, period, num_events, num_reports, flatsize)
                        elif step == 8:
                            REDEEM_RESOLVE.smooth(branch, period, num_events, num_reports, flatsize)
                        elif step == 9:
                            REDEEM_RESOLVE.resolve(branch, period, num_events, num_reports, flatsize)
                        BRANCHES.incrementStep(branch)
                        return(step + 1)
